using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;
using NCG.SecurityDetection.VulnerabilityBuffet.Data;
using System.ComponentModel.DataAnnotations;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;

namespace NCG.SecurityDetection.VulnerabilityBuffet.Areas.Identity.Pages.Account.Manage
{
    public class PersonalDataModel : PageModel
    {
        private readonly UserManager<IdentityUser> _userManager;
        private readonly ILogger<PersonalDataModel> _logger;
        ApplicationDbContext _context;

        [BindProperty]
        public InputModel Input { get; set; }

        [TempData]
        public string ErrorMessage { get; set; }

        public class InputModel
        {
            public string Message { get; set; }

            [Required]
            [Display(Name = "Favorite Food")]
            public string FoodName { get; set; }

            [Required]
            [Display(Name = "Favorite Food Group")]
            public string FoodGroup { get; set; }
        }

        public PersonalDataModel(
            UserManager<IdentityUser> userManager,
            ILogger<PersonalDataModel> logger,
            ApplicationDbContext context)
        {
            _userManager = userManager;
            _logger = logger;
            _context = context;
        }

        public async Task<IActionResult> OnGet()
        {
            var user = _userManager.GetUserAsync(User).Result;
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            var userInfo = _context.ExecSQL<UserPersonalInfo>("SELECT * FROM UserPersonalInfo WHERE UserId = @UserID", new SqlParameter("@UserID", user.Id)).SingleOrDefault();
            if (userInfo != null)
            {
                Input.FoodName = userInfo.FavoriteFood;
                Input.FoodGroup = userInfo.FavoriteFoodGroup;
            }

            return Page();
        }

        public async Task<IActionResult> OnPost()
        {
            var user = _userManager.GetUserAsync(User).Result;
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            var userInfo = _context.ExecSQL<UserPersonalInfo>("SELECT * FROM UserPersonalInfo WHERE UserId = @UserID", new SqlParameter("@UserID", user.Id)).SingleOrDefault();

            if (userInfo != null)
            {
                _context.ExecSQL<UserPersonalInfo>("UPDATE UserPersonalInfo SET FavoriteFood = @FavoriteFood, FavoriteFoodGroup = @FavoriteFoodGroup WHERE UserId = @UserID",
                    new SqlParameter("@UserID", user.Id),
                    new SqlParameter("@FavoriteFood", Input.FoodName),
                    new SqlParameter("@FavoriteFoodGroup", Input.FoodGroup));
            }
            else
            {
                _context.ExecSQL<UserPersonalInfo>("INSERT UserPersonalInfo VALUES (@UserID, @FavoriteFood, @FavoriteFoodGroup)",
                    new SqlParameter("@UserID", user.Id),
                    new SqlParameter("@FavoriteFood", Input.FoodName),
                    new SqlParameter("@FavoriteFoodGroup", Input.FoodGroup));
            }

            Input.Message = "Your favorites have been saved";
            return Page();
        }
    }
}