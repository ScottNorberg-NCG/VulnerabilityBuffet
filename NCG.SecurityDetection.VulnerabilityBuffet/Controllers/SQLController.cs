using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using NCG.SecurityDetection.TestSite.Data;
using NCG.SecurityDetection.TestSite.Models;

namespace NCG.SecurityDetection.TestSite.Controllers
{
    public class SQLController : Controller
    {
        ApplicationDbContext _context;
        IConfiguration _config;

        public SQLController(ApplicationDbContext context, IConfiguration config)
        {
            _context = context;
            _config = config;
        }

        public IActionResult Index()
        {
            return View();
        }

        [HttpGet]
        public IActionResult AllStringInForm()
        {
            var model = new AccountUserViewModel();
            model.SearchText = "(None)";
            return View(model);
        }

        [HttpPost]
        public IActionResult AllStringInForm(string foodName)
        {
            var model = CreateUnsafeGenericModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllIntInForm()
        {
            var model = new AccountUserViewModel();
            model.SearchText = "(None)";
            return View(model);
        }

        [HttpPost]
        public IActionResult AllIntInForm(string foodId)
        {
            var model = CreateUnsafeGenericModelInt(foodId);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllStringInFormCsrfProtected()
        {
            var model = new AccountUserViewModel();
            model.SearchText = "(None)";
            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AllStringInFormCsrfProtected(string foodName)
        {
            var model = CreateUnsafeGenericModel_ForScanner(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllStringInFormQuoteEscaped()
        {
            var model = new AccountUserViewModel();
            model.SearchText = "(None)";
            return View(model);
        }

        [HttpPost]
        public IActionResult AllStringInFormQuoteEscaped(string foodName)
        {
            var escaped = foodName.Replace("'", "''");
            var model = new AccountUserViewModel();
            model.SearchText = escaped;
            var query = "SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%" + escaped + "%'";
            model.Foods = _context.ExecSQL<FoodDisplayView>(query, null);

            return View(model);
        }

        [HttpGet]
        public IActionResult AllStringInFormQuoteEscapedInt()
        {
            var model = new AccountUserViewModel();
            model.SearchText = "(None)";
            return View(model);
        }

        [HttpPost]
        public IActionResult AllStringInFormQuoteEscapedInt(string foodName)
        {
            var escaped = foodName.Replace("'", "''");
            var model = new AccountUserViewModel();
            model.SearchText = escaped;
            var query = "SELECT * FROM FoodDisplayView WHERE FoodID = " + foodName;
            model.Foods = _context.ExecSQL<FoodDisplayView>(query, null);
            return View(model);
        }

        [Route("/sql/AllStringInPath/{foodName}")]
        public IActionResult AllStringInPath(string foodName)
        {
            var model = CreateUnsafeGenericModel(foodName);
            return View(model);
        }

        public IActionResult AllStringInQS(string foodName)
        {
            var model = CreateUnsafeGenericModel(foodName);
            return View(model);
        }

        public IActionResult AllIntInQS(string foodId)
        {
            var model = CreateUnsafeGenericModelInt(foodId);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllStringLineBreak()
        {
            var model = new AccountUserViewModel();
            model.SearchText = "(None)";
            return View(model);
        }

        [HttpPost]
        public IActionResult AllStringLineBreak(string foodName, string foodGroup)
        {
            var model = new AccountUserViewModel();
            model.SearchText = $"Food Name: {foodName}, Food Group: {foodGroup}";
            var searchText = @"SELECT * 
                                FROM FoodDisplayView 
                                WHERE FoodName LIKE '%" + foodName + "%' OR " +
                                    "FoodGroup LIKE '%" + foodGroup + "%'";

            model.Foods = _context.ExecSQL<FoodDisplayView>(searchText, null);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllStringLineBreakSafeSecond()
        {
            var model = new AccountUserViewModel();
            model.SearchText = "(None)";
            return View(model);
        }

        [HttpPost]
        public IActionResult AllStringLineBreakSafeSecond(string foodName, string foodGroup)
        {
            var model = new AccountUserViewModel();
            model.SearchText = $"Food Name: {foodName}, Food Group: {foodGroup}";
            var searchText = @"SELECT * 
                                FROM FoodDisplayView 
                                WHERE FoodName LIKE '%" + foodName + "%' OR " +
                                    "FoodGroup LIKE '%' + @FoodGroup + '%'";

            model.Foods = _context.ExecSQL<FoodDisplayView>(searchText, new SqlParameter("@FoodGroup", foodGroup));
            return View(model);
        }

        [Route("/sql/{foodName}/AllStringWithinPath")]
        public IActionResult AllStringWithinPath(string foodName)
        {
            var model = CreateUnsafeGenericModel(foodName);
            return View(model);
        }

        public IActionResult FalsePositive_Calc(string foodId)
        {
            int calculated = 0;
            var model = new AccountUserViewModel();

            DataTable dt = new DataTable();
            try
            {
                calculated = (int)dt.Compute(foodId, "");
            }
            catch
            {
                try
                {
                    calculated = int.Parse(foodId);
                }
                catch
                {
                    model.SearchText = "(Error)";
                    model.Foods = new List<FoodDisplayView>();
                    return View(model);
                }
            }

            model.SearchText = calculated.ToString();
            model.Foods = _context.ExecSQL<FoodDisplayView>("SELECT * FROM FoodDisplayView WHERE FoodID = @FoodId", new SqlParameter("@FoodID", calculated));
            return View(model);
        }

        public IActionResult FalsePositive_Error(string foodName)
        {
            if (foodName.Contains("'"))
                throw new Exception("String cannot have an apostrophe");

            var model = new AccountUserViewModel();
            model.Foods = _context.ExecSQL<FoodDisplayView>("SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%' + @FoodName + '%'", new SqlParameter("@FoodName", foodName));
            return View(model);
        }

        public IActionResult QueryStringKey()
        {
            var model = new AccountUserViewModel();

            if (Request.Query.Keys.Count == 0)
            {
                model.SearchText = "(None)";
                model.Foods = new List<FoodDisplayView>();
            }
            else
            {
                var key = Request.Query.Keys.First();
                model.SearchText = Request.Query[key];

                var searchText = "SELECT * FROM Food WHERE " + key + " LIKE '%' + @Name + '%'";
                model.Foods = _context.ExecSQL<FoodDisplayView>(searchText, new SqlParameter("@Name", searchText));
            }

            return View(model);
        }

        private AccountUserViewModel CreateUnsafeGenericModel(string foodName)
        {
            var model = new AccountUserViewModel();
            model.SearchText = foodName;
            var searchText = "SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%" + foodName + "%'";
            model.Foods = _context.ExecSQL<FoodDisplayView>(searchText, null);
            return model;
        }

        //This is here to see if SAST scanners will pick it up
        private AccountUserViewModel CreateUnsafeGenericModel_ForScanner(string foodName)
        {
            var model = new AccountUserViewModel();
            model.SearchText = foodName;

            using (var connection = new SqlConnection(_config.GetConnectionString("DefaultConnection")))
            {
                var command = connection.CreateCommand();
                command.CommandText = "SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%" + foodName + "%'";

                connection.Open();

                var foods = new List<FoodDisplayView>();

                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var newFood = new FoodDisplayView();

                        newFood.FoodID = reader.GetInt32(0);
                        newFood.FoodGroup = reader.GetString(1);
                        newFood.FoodName = reader.GetString(2);
                        newFood.Calories = reader.GetNullableInt(3);
                        newFood.Protein = reader.GetNullableDouble(4);
                        newFood.Fat = reader.GetNullableDouble(5);
                        newFood.Carbohydrates = reader.GetNullableDouble(6);

                        foods.Add(newFood);
                    }
                }

                model.Foods = foods;

                connection.Close();
            }
            
            return model;
        }

        private AccountUserViewModel CreateUnsafeGenericModelInt(string foodId)
        {
            var model = new AccountUserViewModel();
            model.SearchText = foodId;
            var searchText = "SELECT * FROM FoodDisplayView WHERE FoodId = " + foodId;
            model.Foods = _context.ExecSQL<FoodDisplayView>(searchText, null);
            return model;
        }

        //Like
        //Int
        //In FROM clause
        //With CSRF validation
    }

    public static class SqlDataReaderExtensions
    {
        public static int? GetNullableInt(this SqlDataReader reader, int index)
        {
            var value = reader[index];
            if (value == null || value == DBNull.Value)
                return null;
            else
                return (int)value;
        }

        public static double? GetNullableDouble(this SqlDataReader reader, int index)
        {
            var value = reader[index];
            if (value == null || value == DBNull.Value)
                return null;
            else
                return (double)value;
        }
    }
}