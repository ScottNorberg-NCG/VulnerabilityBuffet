using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Web;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using NCG.SecurityDetection.VulnerabilityBuffet.Data;
using NCG.SecurityDetection.VulnerabilityBuffet.Models;
using Newtonsoft.Json;

namespace NCG.SecurityDetection.VulnerabilityBuffet.Controllers
{
    public class XSSController : Controller
    {
        ApplicationDbContext _context;
        List<string> _allTags;

        public XSSController(ApplicationDbContext context)
        {
            _context = context;

            _allTags = new List<string>();
            _allTags.Add("script");
            _allTags.Add("img");
            _allTags.Add("marquee");
            _allTags.Add("svg");
            _allTags.Add("iframe");
            _allTags.Add("body");
            _allTags.Add("video");
            _allTags.Add("audio");
            _allTags.Add("object");
        }

        public IActionResult Index()
        {
            return View();
        }

        public IActionResult ReflectedFromQS(string foodName)
        {
            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult RecursiveEndBracket()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult RecursiveEndBracket(string foodName)
        {
            foreach (var tag in _allTags)
            {
                foodName = Regex.Replace(foodName, $"<{tag}>", "", RegexOptions.IgnoreCase);
            }

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult RecursiveNoEndBracket()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult RecursiveNoEndBracket(string foodName)
        {
            foreach (var tag in _allTags)
            {
                foodName = Regex.Replace(foodName, $"<{tag}", "", RegexOptions.IgnoreCase);
            }

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllowUpperCase()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult AllowUpperCase(string foodName)
        {
            foreach (var tag in _allTags)
            {
                foodName = Regex.Replace(foodName, $"<{tag}", "");
            }

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllowMixedCase()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult AllowMixedCase(string foodName)
        {
            foreach (var tag in _allTags)
            {
                foodName = Regex.Replace(foodName, $"<{tag}", "");
                foodName = Regex.Replace(foodName, $"<{tag.ToUpper()}", "");
            }

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult UrlDecode()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult UrlDecode(string foodName)
        {
            foodName = foodName.Replace("<", "").Replace(">", "").Replace("(", "").Replace(")", "");
            foodName = HttpUtility.UrlDecode(foodName);
            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllowImg()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult AllowImg(string foodName)
        {
            foreach (var tag in _allTags)
            {
                if (tag != "img")
                    foodName = Regex.Replace(foodName, $"<{tag}", "", RegexOptions.IgnoreCase);
            }

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllowMarquee()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult AllowMarquee(string foodName)
        {
            foreach (var tag in _allTags)
            {
                if (tag != "marquee")
                    foodName = Regex.Replace(foodName, $"<{tag}", "", RegexOptions.IgnoreCase);
            }

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllowSvg()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult AllowSvg(string foodName)
        {
            foreach (var tag in _allTags)
            {
                if (tag != "svg")
                    foodName = Regex.Replace(foodName, $"<{tag}", "", RegexOptions.IgnoreCase);
            }

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllowIframe()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult AllowIframe(string foodName)
        {
            foreach (var tag in _allTags)
            {
                if (tag != "iframe")
                    foodName = Regex.Replace(foodName, $"<{tag}", "", RegexOptions.IgnoreCase);
            }

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllowBody()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult AllowBody(string foodName)
        {
            foreach (var tag in _allTags)
            {
                if (tag != "body")
                    foodName = Regex.Replace(foodName, $"<{tag}", "", RegexOptions.IgnoreCase);
            }

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllowVideo()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult AllowVideo(string foodName)
        {
            foreach (var tag in _allTags)
            {
                if (tag != "video")
                    foodName = Regex.Replace(foodName, $"<{tag}", "", RegexOptions.IgnoreCase);
            }

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllowAudio()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult AllowAudio(string foodName)
        {
            foreach (var tag in _allTags)
            {
                if (tag != "audio")
                    foodName = Regex.Replace(foodName, $"<{tag}", "", RegexOptions.IgnoreCase);
            }

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllowObject()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult AllowObject(string foodName)
        {
            foreach (var tag in _allTags)
            {
                if (tag != "object")
                    foodName = Regex.Replace(foodName, $"<{tag}", "", RegexOptions.IgnoreCase);
            }

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllowSlash()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult AllowSlash(string foodName)
        {
            foreach (var tag in _allTags)
            {
                foodName = Regex.Replace(foodName, $"<{tag}>", "", RegexOptions.IgnoreCase);
                foodName = Regex.Replace(foodName, $"<{tag} ", "", RegexOptions.IgnoreCase);
            }

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult MetaTag()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult MetaTag(string foodName)
        {
            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult JQuery()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult SearchByName()
        {
            var body = "";

            using (var reader = new StreamReader(HttpContext.Request.Body))
            {
                body = reader.ReadToEnd();
            }

            var searchText = JsonConvert.DeserializeObject<SearchRequest>(body);

            var foods = _context.ExecSQL<FoodDisplayView>($"SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%' + @FoodName + '%'", new SqlParameter("@FoodName", searchText.text));

            return Json(new { id = searchText.text, foods });
        }

        private AccountUserViewModel CreateModel(string foodName)
        {
            var model = new AccountUserViewModel();
            model.SearchText = foodName;
            model.Foods = _context.ExecSQL<FoodDisplayView>("SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%' + @FoodName + '%'", new SqlParameter("@FoodName", foodName));
            return model;
        }

        private class SearchRequest
        { 
            public string text { get; set; }
        }
    }
}