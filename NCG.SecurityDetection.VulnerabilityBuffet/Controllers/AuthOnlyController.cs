using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using NCG.SecurityDetection.VulnerabilityBuffet.Authentication;
using NCG.SecurityDetection.VulnerabilityBuffet.Data;
using NCG.SecurityDetection.VulnerabilityBuffet.Models;

namespace NCG.SecurityDetection.VulnerabilityBuffet.Controllers
{
    [CustomAuthorize]
    public class AuthOnlyController : Controller
    {
        ApplicationDbContext _dbContext;
        private readonly AuthManager _authManager;
        private readonly IHostingEnvironment _hostEnvironment;

        public AuthOnlyController(ApplicationDbContext context, AuthManager authManager, IHostingEnvironment hostEnvironment)
        {
            _dbContext = context;
            _authManager = authManager;
            _hostEnvironment = hostEnvironment;
        }

        public IActionResult Index()
        {
            return View();
        }

        public IActionResult SQLi(string foodName)
        {
            var model = CreateUnsafeGenericModel(foodName);
            return View(model);
        }

        public IActionResult XSS(string foodName)
        {
            var model = new AccountUserViewModel();
            model.SearchText = foodName;
            model.Foods = _dbContext.ExecSQL<FoodDisplayView>("SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%' + @FoodName + '%'", new SqlParameter("@FoodName", foodName));
            return View(model);
        }

        public IActionResult StoredSQLi()
        {
            var user = _authManager.GetLoggedInUser();

            if (user == null)
            {
                return NotFound($"Unable to load user.");
            }

            var food = user.FavoriteFood == null ? "(Not set)" : user.FavoriteFood;
            var model = CreateUnsafeGenericModel(food);
            return View(model);
        }

        public IActionResult StoredXSS()
        {
            var user = _authManager.GetLoggedInUser();
            if (user == null)
            {
                return NotFound($"Unable to load user.");
            }

            var foodGroup = user.FavoriteFoodGroup == null ? "(Not set)" : user.FavoriteFoodGroup;

            var model = new AccountUserViewModel();
            model.SearchText = foodGroup;
            model.Foods = _dbContext.ExecSQL<FoodDisplayView>("SELECT * FROM FoodDisplayView WHERE FoodGroup LIKE '%' + @FoodGroup + '%'", new SqlParameter("@FoodGroup", foodGroup));
            return View(model);
        }

        [HttpGet]
        public IActionResult SafeFileUpload()
        {
            var user = _authManager.GetLoggedInUser();
            ViewBag.Files = _dbContext.UserFile.Where(f => f.UserId == user.UserId).ToList();
            ViewBag.Message = "";

            return View();
        }

        [ValidateAntiForgeryToken]
        [HttpPost]
        public IActionResult SafeFileUpload(SafeFileUploadViewModel model)
        {
            var user = _authManager.GetLoggedInUser();
            ViewBag.Files = _dbContext.UserFile.Where(f => f.UserId == user.UserId).ToList();

            var extension = Path.GetExtension(model.FileBytes.FileName);

            byte[] fileBytes;

            using (var stream = model.FileBytes.OpenReadStream())
            {
                fileBytes = new byte[stream.Length];

                for (int i = 0; i < stream.Length; i++)
                {
                    fileBytes[i] = (byte)stream.ReadByte();
                }
            }

            if (fileBytes.Length > 2097152)
            {
                ViewBag.Message = $"File too large.";
                return View();
            }

            switch (extension)
            {
                case ".jpg":
                case ".jpeg":
                    if (fileBytes[0] != 255 || fileBytes[1] != 216 || fileBytes[2] != 255)
                    {
                        ViewBag.Message = $"Image appears not to be in jpg format. Please try another.";
                        return View();
                    }
                    else if (fileBytes[3] != 219 && fileBytes[3] != 224 && fileBytes[3] != 238 && fileBytes[3] != 225)
                    {
                        ViewBag.Message = $"Image appears not to be in jpg format. Please try another.";
                        return View();
                    }
                    break;
                case ".gif":
                    if (fileBytes[0] != 71 || fileBytes[1] != 73 || fileBytes[2] != 70 || fileBytes[3] != 56 || fileBytes[5] != 97)
                    {
                        ViewBag.Message = $"Image appears not to be in gif format. Please try another.";
                        return View();
                    }
                    else if (fileBytes[4] != 55 && fileBytes[4] != 57)
                    {
                        ViewBag.Message = $"Image appears not to be in gif format. Please try another.";
                        return View();
                    }
                    break;
                case ".png":
                    if (fileBytes[0] != 137 || fileBytes[1] != 80 || fileBytes[2] != 78 || fileBytes[3] != 71 || 
                        fileBytes[4] != 13 || fileBytes[5] != 10 || fileBytes[6] != 26 || fileBytes[7] != 10)
                    {
                        ViewBag.Message = $"Image appears not to be in png format. Please try another.";
                        return View();
                    }
                    break;
                default:
                    ViewBag.Message = $"Extension {extension} is not supported";
                    return View();
            }

            var userFile = new UserFile();
            userFile.UserId = user.UserId;
            userFile.FileName = model.FileName;
            userFile.FileExtension = extension;
            userFile.FileBytes = fileBytes;
            userFile.CreatedOn = DateTime.Now;

            _dbContext.UserFile.Add(userFile);
            _dbContext.SaveChanges();

            ViewBag.Files = _dbContext.UserFile.Where(f => f.UserId == user.UserId).ToList();
            ViewBag.Message = "File saved successfully";

            return View();
        }

        [HttpGet]
        public IActionResult UnsafeFileUpload()
        {
            ViewBag.Files = GetUploadedFiles();
            ViewBag.Message = "";

            return View();
        }

        [ValidateAntiForgeryToken]
        [HttpPost]
        public IActionResult UnsafeFileUpload(IFormFile file)
        {
            ViewBag.Files = GetUploadedFiles();

            byte[] fileBytes;

            using (var stream = file.OpenReadStream())
            {
                fileBytes = new byte[stream.Length];

                for (int i = 0; i < stream.Length; i++)
                {
                    fileBytes[i] = (byte)stream.ReadByte();
                }
            }

            var rootFolder = _hostEnvironment.ContentRootPath;
            System.IO.File.WriteAllBytes(rootFolder + "\\wwwroot\\UploadedFiles\\" + file.FileName, fileBytes);

            ViewBag.Files = GetUploadedFiles();
            ViewBag.Message = "File saved successfully";

            return View();
        }

        [HttpGet]
        public IActionResult Shop()
        {
            var user = _authManager.GetLoggedInUser();
            var order = _dbContext.Order.Include(o => o.OrderDetail).ThenInclude(d => d.FoodGroup).OrderBy(o => o.DateCreated).FirstOrDefault(o => o.DateCompleted == null && o.UserId == user.UserId);

            if (order == null)
                return View(_dbContext.FoodGroup.OrderBy(g => g.FoodGroupText).Select(g => new ShopViewModel(g)).ToList());
            else
                return View(order.OrderDetail.Select(d => new ShopViewModel(d)).ToList());
        }

        [HttpPost]
        public IActionResult Shop(List<ShopViewModel> orders)
        {
            var user = _authManager.GetLoggedInUser();
            var parentOrder = _dbContext.Order.Include(o => o.OrderDetail).ThenInclude(d => d.FoodGroup).OrderBy(o => o.DateCreated).FirstOrDefault(o => o.DateCompleted == null && o.UserId == user.UserId);

            if (parentOrder == null)
            {
                parentOrder = new Order();
                parentOrder.UserId = user.UserId;
                parentOrder.DateCreated = DateTime.Now;

                _dbContext.Order.Add(parentOrder);
            }

            var totalPrice = 0.0;

            foreach (var newOrder in orders)
            {
                var toUpdate = parentOrder.OrderDetail.SingleOrDefault(d => d.FoodGroupId == newOrder.FoodGroupID);
                if (toUpdate == null)
                {
                    toUpdate = new OrderDetail();
                    toUpdate.FoodGroupId = newOrder.FoodGroupID;

                    parentOrder.OrderDetail.Add(toUpdate);
                }

                toUpdate.Quantity = newOrder.Quantity;

                totalPrice += (double)newOrder.Quantity * newOrder.Price;
            }

            parentOrder.TotalPrice = totalPrice;

            _dbContext.SaveChanges();
            return Redirect("/AuthOnly/Pay/" + parentOrder.OrderId.ToString());
        }

        [HttpGet]
        public IActionResult Pay(int id, string message)
        {
            //We should confirm that this order was placed by this user and that it hasn't been submitted before, but we're not
            var order = _dbContext.Order.Single(o => o.OrderId == id);

            ViewBag.OrderID = order.OrderId;
            ViewBag.TotalPrice = order.TotalPrice;
            ViewBag.Message = message;

            return View();
        }

        [HttpGet]
        public IActionResult Confirm(int OrderID, float TotalPrice, string NameOnCard, string CreditCardNumber, int CreditCardMonth, int CreditCardYear)
        {
            var ccNo = CreditCardNumber.Replace(" ", "");
            if (!Regex.IsMatch(ccNo, "^(?:4[0-9]{12}(?:[0-9]{3})?|[25][1-7][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$"))
            {
                return Redirect($"/AuthOnly/Pay/{OrderID}?message=Invalid Credit Card Number");
            }

            var model = new ConfirmViewModel();

            model.OrderID = OrderID;
            model.TotalPrice = TotalPrice;
            model.NameOnCard = NameOnCard;
            model.CreditCardNumber = CreditCardNumber;
            model.CreditCardMonth = CreditCardMonth;
            model.CreditCardYear = CreditCardYear;

            return View(model);
        }

        [HttpPost]
        public IActionResult Confirm(ConfirmViewModel model)
        {
            var delay = new Random().Next(500, 1500);

            var order = _dbContext.Order.SingleOrDefault(o => o.OrderId == model.OrderID);

            if (order != null)
            {
                order.DateCompleted = DateTime.Now;
                _dbContext.SaveChanges();
            }

            Thread.Sleep(delay);

            return Redirect("Complete");
        }

        [HttpGet]
        public IActionResult Complete()
        {
            return View();
        }

        [HttpGet]
        public IActionResult ViewMyOrders(int id)
        {
            var items = new List<OrderListItemViewModel>();

            var orders = _dbContext.Order.Include(o => o.OrderDetail).Where(o => o.UserId == id);

            foreach (var order in orders)
            {
                var dateCompleted = order.DateCompleted.HasValue ? order.DateCompleted.Value.ToString() : "N/A";
                var display = $"Order: {order.OrderId}, Completed On: {dateCompleted}, {order.OrderDetail.Count()} items";
                items.Add(new OrderListItemViewModel() { OrderID = order.OrderId, DisplayText = display });
            }

            return View(items);
        }

        [HttpGet]
        public IActionResult OrderDetail(int id)
        {
            var user = _authManager.GetLoggedInUser();
            var order = _dbContext.Order.Include(o => o.OrderDetail).ThenInclude(d => d.FoodGroup).OrderBy(o => o.DateCreated).FirstOrDefault(o => o.OrderId == id);

            return View(order.OrderDetail.Where(od => od.Quantity > 0).Select(d => new ShopViewModel(d)).ToList());
        }

        public IActionResult FileDownload(int id)
        {
            var user = _authManager.GetLoggedInUser();
            var file = _dbContext.UserFile.SingleOrDefault(f => f.UserId == user.UserId && f.FileId == id);

            if (file == null)
                return NotFound();

            using (var image = new MemoryStream(file.FileBytes))
            { 
                var extension = file.FileExtension.Replace(".", "");
                return File(image, $"image/{extension}");            
            }
        }

        private List<string> GetUploadedFiles()
        {
            var list = new List<string>();

            var rootFolder = _hostEnvironment.ContentRootPath;

            var files = Directory.GetFiles(rootFolder + "\\wwwroot\\UploadedFiles\\");

            foreach (var file in files)
            {
                list.Add(Path.GetFileName(file));
            }

            return list;
        }

        private AccountUserViewModel CreateUnsafeGenericModel(string foodName)
        {
            var model = new AccountUserViewModel();
            model.SearchText = foodName;
            var searchText = "SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%" + foodName + "%'";
            model.Foods = _dbContext.ExecSQL<FoodDisplayView>(searchText, null);
            return model;
        }
    }
}