using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using NCG.SecurityDetection.VulnerabilityBuffet.Data;
using NCG.SecurityDetection.VulnerabilityBuffet.Models;

namespace NCG.SecurityDetection.VulnerabilityBuffet.Controllers
{
    [Authorize]
    public class AuthOnlyController : Controller
    {
        ApplicationDbContext _context;
        private readonly UserManager<IdentityUser> _userManager;

        public AuthOnlyController(ApplicationDbContext context, UserManager<IdentityUser> userManager)
        {
            _context = context;
            _userManager = userManager;
        }

        public IActionResult Index()
        {
            return View();
        }

        public IActionResult SQLi(string foodName)
        {
            var model = CreateUnsafeGenericModel(foodName);
            return View(model);
        }

        public IActionResult XSS(string foodName)
        {
            var model = new AccountUserViewModel();
            model.SearchText = foodName;
            model.Foods = _context.ExecSQL<FoodDisplayView>("SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%' + @FoodName + '%'", new SqlParameter("@FoodName", foodName));
            return View(model);
        }

        public IActionResult StoredSQLi()
        {
            var user = _userManager.GetUserAsync(User).Result;
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            var userInfo = _context.ExecSQL<UserPersonalInfo>("SELECT * FROM UserPersonalInfo WHERE UserId = @UserID", new SqlParameter("@UserID", user.Id)).SingleOrDefault();

            var food = userInfo == null ? "(Not set)" : userInfo.FavoriteFood;
            var model = CreateUnsafeGenericModel(food);
            return View(model);
        }

        public IActionResult StoredXSS()
        {
            var user = _userManager.GetUserAsync(User).Result;
            if (user == null)
            {
                return NotFound($"Unable to load user with ID '{_userManager.GetUserId(User)}'.");
            }

            var userInfo = _context.ExecSQL<UserPersonalInfo>("SELECT * FROM UserPersonalInfo WHERE UserId = @UserID", new SqlParameter("@UserID", user.Id)).SingleOrDefault();

            var foodGroup = userInfo == null ? "(Not set)" : userInfo.FavoriteFoodGroup;

            var model = new AccountUserViewModel();
            model.SearchText = foodGroup;
            model.Foods = _context.ExecSQL<FoodDisplayView>("SELECT * FROM FoodDisplayView WHERE FoodGroup LIKE '%' + @FoodGroup + '%'", new SqlParameter("@FoodGroup", foodGroup));
            return View(model);
        }

        private AccountUserViewModel CreateUnsafeGenericModel(string foodName)
        {
            var model = new AccountUserViewModel();
            model.SearchText = foodName;
            var searchText = "SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%" + foodName + "%'";
            model.Foods = _context.ExecSQL<FoodDisplayView>(searchText, null);
            return model;
        }
    }
}