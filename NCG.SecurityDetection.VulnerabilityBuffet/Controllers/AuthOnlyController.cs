using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using NCG.SecurityDetection.VulnerabilityBuffet.Authentication;
using NCG.SecurityDetection.VulnerabilityBuffet.Data;
using NCG.SecurityDetection.VulnerabilityBuffet.Models;

namespace NCG.SecurityDetection.VulnerabilityBuffet.Controllers
{
    [CustomAuthorize]
    public class AuthOnlyController : Controller
    {
        ApplicationDbContext _dbContext;
        private readonly AuthManager _authManager;

        public AuthOnlyController(ApplicationDbContext context, AuthManager authManager)
        {
            _dbContext = context;
            _authManager = authManager;
        }

        public IActionResult Index()
        {
            return View();
        }

        public IActionResult SQLi(string foodName)
        {
            var model = CreateUnsafeGenericModel(foodName);
            return View(model);
        }

        public IActionResult XSS(string foodName)
        {
            var model = new AccountUserViewModel();
            model.SearchText = foodName;
            model.Foods = _dbContext.ExecSQL<FoodDisplayView>("SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%' + @FoodName + '%'", new SqlParameter("@FoodName", foodName));
            return View(model);
        }

        public IActionResult StoredSQLi()
        {
            var user = _authManager.GetLoggedInUser();

            if (user == null)
            {
                return NotFound($"Unable to load user.");
            }

            var food = user.FavoriteFood == null ? "(Not set)" : user.FavoriteFood;
            var model = CreateUnsafeGenericModel(food);
            return View(model);
        }

        public IActionResult StoredXSS()
        {
            var user = _authManager.GetLoggedInUser();
            if (user == null)
            {
                return NotFound($"Unable to load user.");
            }

            var foodGroup = user.FavoriteFoodGroup == null ? "(Not set)" : user.FavoriteFoodGroup;

            var model = new AccountUserViewModel();
            model.SearchText = foodGroup;
            model.Foods = _dbContext.ExecSQL<FoodDisplayView>("SELECT * FROM FoodDisplayView WHERE FoodGroup LIKE '%' + @FoodGroup + '%'", new SqlParameter("@FoodGroup", foodGroup));
            return View(model);
        }

        [HttpGet]
        public IActionResult SafeFileUpload()
        {
            var user = _authManager.GetLoggedInUser();
            ViewBag.Files = _dbContext.UserFile.Where(f => f.UserId == user.UserId).ToList();
            ViewBag.Message = "";

            return View();
        }

        [ValidateAntiForgeryToken]
        [HttpPost]
        public IActionResult SafeFileUpload(SafeFileUploadViewModel model)
        {
            var user = _authManager.GetLoggedInUser();
            ViewBag.Files = _dbContext.UserFile.Where(f => f.UserId == user.UserId).ToList();

            var extension = Path.GetExtension(model.FileBytes.FileName);

            byte[] fileBytes;

            using (var stream = model.FileBytes.OpenReadStream())
            {
                fileBytes = new byte[stream.Length];

                for (int i = 0; i < stream.Length; i++)
                {
                    fileBytes[i] = (byte)stream.ReadByte();
                }
            }

            if (fileBytes.Length > 2097152)
            {
                ViewBag.Message = $"File too large.";
                return View();
            }

            switch (extension)
            {
                case ".jpg":
                case ".jpeg":
                    if (fileBytes[0] != 255 || fileBytes[1] != 216 || fileBytes[2] != 255)
                    {
                        ViewBag.Message = $"Image appears not to be in jpg format. Please try another.";
                        return View();
                    }
                    else if (fileBytes[3] != 219 && fileBytes[3] != 224 && fileBytes[3] != 238 && fileBytes[3] != 225)
                    {
                        ViewBag.Message = $"Image appears not to be in jpg format. Please try another.";
                        return View();
                    }
                    break;
                case ".gif":
                    if (fileBytes[0] != 71 || fileBytes[1] != 73 || fileBytes[2] != 70 || fileBytes[3] != 56 || fileBytes[5] != 97)
                    {
                        ViewBag.Message = $"Image appears not to be in gif format. Please try another.";
                        return View();
                    }
                    else if (fileBytes[4] != 55 && fileBytes[4] != 57)
                    {
                        ViewBag.Message = $"Image appears not to be in gif format. Please try another.";
                        return View();
                    }
                    break;
                case ".png":
                    if (fileBytes[0] != 137 || fileBytes[1] != 80 || fileBytes[2] != 78 || fileBytes[3] != 71 || 
                        fileBytes[4] != 13 || fileBytes[5] != 10 || fileBytes[6] != 26 || fileBytes[7] != 10)
                    {
                        ViewBag.Message = $"Image appears not to be in png format. Please try another.";
                        return View();
                    }
                    break;
                default:
                    ViewBag.Message = $"Extension {extension} is not supported";
                    return View();
            }

            var userFile = new UserFile();
            userFile.UserId = user.UserId;
            userFile.FileName = model.FileName;
            userFile.FileExtension = extension;
            userFile.FileBytes = fileBytes;
            userFile.CreatedOn = DateTime.Now;

            _dbContext.UserFile.Add(userFile);
            _dbContext.SaveChanges();

            ViewBag.Files = _dbContext.UserFile.Where(f => f.UserId == user.UserId).ToList();
            ViewBag.Message = "File saved successfully";

            return View();
        }

        public IActionResult FileDownload(int id)
        {
            var user = _authManager.GetLoggedInUser();
            var file = _dbContext.UserFile.SingleOrDefault(f => f.UserId == user.UserId && f.FileId == id);

            if (file == null)
                return NotFound();

            var image = new MemoryStream(file.FileBytes);
            var extension = file.FileExtension.Replace(".", "");
            return File(image, $"image/{extension}");
        }

        private AccountUserViewModel CreateUnsafeGenericModel(string foodName)
        {
            var model = new AccountUserViewModel();
            model.SearchText = foodName;
            var searchText = "SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%" + foodName + "%'";
            model.Foods = _dbContext.ExecSQL<FoodDisplayView>(searchText, null);
            return model;
        }
    }
}