using System;
using System.Collections.Generic;
using Microsoft.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Web;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using NCG.SecurityDetection.VulnerabilityBuffet.Data;
using NCG.SecurityDetection.VulnerabilityBuffet.Models;
using Newtonsoft.Json;
using Microsoft.Extensions.Logging;

namespace NCG.SecurityDetection.VulnerabilityBuffet.Controllers
{
    public class XSSController : Controller
    {
        ApplicationDbContext _context;
        private readonly ILogger _logger;

        List<string> _allTags;

        public XSSController(ApplicationDbContext context, ILogger<XSSController> logger)
        {
            _context = context;
            _logger = logger;

            _allTags = new List<string>();
            _allTags.Add("script");
            _allTags.Add("img");
            _allTags.Add("marquee");
            _allTags.Add("svg");
            _allTags.Add("iframe");
            _allTags.Add("body");
            _allTags.Add("video");
            _allTags.Add("audio");
            _allTags.Add("object");
        }

        public IActionResult Index()
        {
            _logger.LogInformation("Index called");
            return View();
        }

        public IActionResult ReflectedFromQS([FromQuery]string foodName)
        {
            _logger.LogInformation($"ReflectedFromQS value: {foodName}");
            var ignored = CreateModel(foodName);

            //Add an explicit binding to make this easier to find by SAST scanners
            var model = new AccountUserViewModel();
            model.Foods = ignored.Foods;
            model.SearchText = foodName;

            return View(model);
        }

        public IActionResult Simple([FromQuery] AccountUserViewModel model)
        {
            _logger.LogInformation($"ReflectedFromQS value: {model.SearchText}");

            model.Foods = CreateModel(model.SearchText).Foods;

            return View(model);
        }

        public IActionResult SingleQuotesEncoded(string foodName)
        {
            _logger.LogInformation("SingleQuotesEncoded value: " + foodName);
            var model = CreateModel(foodName);
            return View(model);
        }

        public IActionResult DoubleQuotesEncoded(string foodName)
        {
            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult RecursiveEndBracket()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult RecursiveEndBracket(string foodName)
        {
            //Hard-code tags here to see if SAST scanners pick it up
            foodName = Regex.Replace(foodName, "<script>", "", RegexOptions.IgnoreCase);
            foodName = Regex.Replace(foodName, "<img>", "", RegexOptions.IgnoreCase);
            foodName = Regex.Replace(foodName, "<marquee>", "", RegexOptions.IgnoreCase);
            foodName = Regex.Replace(foodName, "<svg>", "", RegexOptions.IgnoreCase);
            foodName = Regex.Replace(foodName, "<iframe>", "", RegexOptions.IgnoreCase);
            foodName = Regex.Replace(foodName, "<body>", "", RegexOptions.IgnoreCase);
            foodName = Regex.Replace(foodName, "<video>", "", RegexOptions.IgnoreCase);
            foodName = Regex.Replace(foodName, "<audio>", "", RegexOptions.IgnoreCase);
            foodName = Regex.Replace(foodName, "<object>", "", RegexOptions.IgnoreCase);

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult RecursiveNoEndBracket()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult RecursiveNoEndBracket(string foodName)
        {
            foreach (var tag in _allTags)
            {
                foodName = Regex.Replace(foodName, $"<{tag}", "", RegexOptions.IgnoreCase);
            }

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllowUpperCase()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AllowUpperCase(string foodName)
        {
            //Hard-code the values here to see if any SAST scanners can figure it out
            foodName = foodName.Replace("<script", "")
                                .Replace("<img", "")
                                .Replace("<marquee", "")
                                .Replace("<svg", "")
                                .Replace("<iframe", "")
                                .Replace("<body", "")
                                .Replace("<video", "")
                                .Replace("<audio", "")
                                .Replace("<object", "");

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllowMixedCase()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult AllowMixedCase(string foodName)
        {
            foreach (var tag in _allTags)
            {
                foodName = Regex.Replace(foodName, $"<{tag}", "");
                foodName = Regex.Replace(foodName, $"<{tag.ToUpper()}", "");
            }

            //The param element only exists within object, so we can't just add it to _allTags, so hard-code it here until we can think of something better
            foodName = Regex.Replace(foodName, "<param", "");
            foodName = Regex.Replace(foodName, "<PARAM", "");

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult UrlDecode()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult UrlDecode(string foodName)
        {
            foodName = foodName.Replace("<", "").Replace(">", "").Replace("(", "").Replace(")", "");
            foodName = HttpUtility.UrlDecode(foodName);
            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllowImg()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult AllowImg(string foodName)
        {
            foreach (var tag in _allTags)
            {
                if (tag != "img")
                    foodName = Regex.Replace(foodName, $"<{tag}", "", RegexOptions.IgnoreCase);
            }

            //The param element only exists within object, so we can't just add it to _allTags, so hard-code it here until we can think of something better
            foodName = Regex.Replace(foodName, $"<param", "", RegexOptions.IgnoreCase);

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllowMarquee()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult AllowMarquee(string foodName)
        {
            foreach (var tag in _allTags)
            {
                if (tag != "marquee")
                    foodName = Regex.Replace(foodName, $"<{tag}", "", RegexOptions.IgnoreCase);
            }

            //The param element only exists within object, so we can't just add it to _allTags, so hard-code it here until we can think of something better
            foodName = Regex.Replace(foodName, $"<param", "", RegexOptions.IgnoreCase);

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllowSvg()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [ValidateAntiForgeryToken]
        [HttpPost]
        public IActionResult AllowSvg(string foodName)
        {
            foreach (var tag in _allTags)
            {
                if (tag != "svg")
                    foodName = Regex.Replace(foodName, $"<{tag}", "", RegexOptions.IgnoreCase);
            }

            //The param element only exists within object, so we can't just add it to _allTags, so hard-code it here until we can think of something better
            foodName = Regex.Replace(foodName, $"<param", "", RegexOptions.IgnoreCase);

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllowIframe()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult AllowIframe(string foodName)
        {
            foreach (var tag in _allTags)
            {
                if (tag != "iframe")
                    foodName = Regex.Replace(foodName, $"<{tag}", "", RegexOptions.IgnoreCase);
            }

            //The param element only exists within object, so we can't just add it to _allTags, so hard-code it here until we can think of something better
            foodName = Regex.Replace(foodName, $"<param", "", RegexOptions.IgnoreCase);

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllowBody()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult AllowBody(string foodName)
        {
            foreach (var tag in _allTags)
            {
                if (tag != "body")
                    foodName = Regex.Replace(foodName, $"<{tag}", "", RegexOptions.IgnoreCase);
            }

            //The param element only exists within object, so we can't just add it to _allTags, so hard-code it here until we can think of something better
            foodName = Regex.Replace(foodName, $"<param", "", RegexOptions.IgnoreCase);

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllowVideo()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult AllowVideo(string foodName)
        {
            foreach (var tag in _allTags)
            {
                if (tag != "video")
                    foodName = Regex.Replace(foodName, $"<{tag}", "", RegexOptions.IgnoreCase);
            }

            //The param element only exists within object, so we can't just add it to _allTags, so hard-code it here until we can think of something better
            foodName = Regex.Replace(foodName, $"<param", "", RegexOptions.IgnoreCase);

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllowAudio()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [ValidateAntiForgeryToken]
        [HttpPost]
        public IActionResult AllowAudio(string foodName)
        {
            foreach (var tag in _allTags)
            {
                if (tag != "audio")
                    foodName = Regex.Replace(foodName, $"<{tag}", "", RegexOptions.IgnoreCase);
            }

            //The param element only exists within object, so we can't just add it to _allTags, so hard-code it here until we can think of something better
            foodName = Regex.Replace(foodName, $"<param", "", RegexOptions.IgnoreCase);

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllowObject()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult AllowObject(string foodName)
        {
            foreach (var tag in _allTags)
            {
                if (tag != "object")
                    foodName = Regex.Replace(foodName, $"<{tag}", "", RegexOptions.IgnoreCase);
            }

            //Keep param object if present

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult AllowSlash()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [ValidateAntiForgeryToken]
        [HttpPost]
        public IActionResult AllowSlash(string foodName)
        {
            foreach (var tag in _allTags)
            {
                foodName = Regex.Replace(foodName, $"<{tag}>", "", RegexOptions.IgnoreCase);
                foodName = Regex.Replace(foodName, $"<{tag} ", "", RegexOptions.IgnoreCase);
            }

            //The param element only exists within object, so we can't just add it to _allTags, so hard-code it here until we can think of something better
            foodName = Regex.Replace(foodName, $"<param>", "", RegexOptions.IgnoreCase);
            foodName = Regex.Replace(foodName, $"<param", "", RegexOptions.IgnoreCase);

            var model = CreateModel(foodName);
            return View(model);
        }

        [HttpGet]
        public IActionResult MetaTag()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult MetaTag(string foodName)
        {
            var model = CreateModel(foodName);
            return View(model);
        }

        public IActionResult InputNoEncoding()
        {
            var foodName = GetFoodNameFromValueShadowing();

            var model = CreateModel(foodName);

            //Put the whole HTML here because .NET won't allow for certain types of reflection
            ViewBag.InputText = $"<input type=\"text\" id=\"foodName\" name=\"foodName\" value=\"{foodName}\" />";

            return View(model);
        }

        public IActionResult InputEncoded()
        {
            var foodName = GetFoodNameFromValueShadowing();

            var model = CreateModel(foodName);

            //Put the whole HTML here because .NET won't allow for certain types of reflection
            ViewBag.InputText = $"<input type=\"text\" id=\"foodName\" name=\"foodName\" value=\"{foodName.Replace(">", "&gt;").Replace("<", "&lt;")}\" />";

            return View(model);
        }

        [HttpGet]
        public IActionResult JQuery()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        public IActionResult SafeJQuery()
        {
            var model = new AccountUserViewModel();
            return View(model);
        }

        [HttpPost]
        public IActionResult SearchByName()
        {
            var body = new StreamReader(HttpContext.Request.Body, encoding: Encoding.UTF8, detectEncodingFromByteOrderMarks: false, leaveOpen: true).ReadToEndAsync().Result;

            var searchText = JsonConvert.DeserializeObject<SearchRequest>(body);

            _logger.LogInformation(body);

            var foods = _context.ExecSQL<FoodDisplayView>($"SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%' + @FoodName + '%'", new SqlParameter("@FoodName", searchText.text));

            return Json(new { id = searchText.text, foods });
        }

        private string GetFoodNameFromValueShadowing()
        {
            var foodName = "(None)";

            var body = new StreamReader(HttpContext.Request.Body, encoding: Encoding.UTF8, detectEncodingFromByteOrderMarks: false, leaveOpen: true).ReadToEndAsync().Result;

            if (!string.IsNullOrEmpty(body))
            {
                var decoded = System.Net.WebUtility.UrlDecode(body);
                var splitBody = decoded.Split("&", StringSplitOptions.RemoveEmptyEntries);

                foreach (var kvp in splitBody)
                {
                    if (kvp.ToLower().StartsWith("foodname") && kvp.Contains("="))
                    {
                        foodName = kvp.Replace("foodName=", "");
                    }
                }
            }

            if (HttpContext.Request.Query.ContainsKey("foodName"))
            {
                foodName = HttpContext.Request.Query["foodName"];
            }

            if (!string.IsNullOrEmpty(HttpContext.Request.Cookies["foodName"]))
            {
                foodName = HttpContext.Request.Cookies["foodName"];
            }

            return foodName;
        }

        private AccountUserViewModel CreateModel(string foodName)
        {
            var model = new AccountUserViewModel();
            model.SearchText = foodName;
            model.Foods = _context.ExecSQL<FoodDisplayView>("SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%' + @FoodName + '%'", new SqlParameter("@FoodName", foodName));
            return model;
        }

        private class SearchRequest
        { 
            public string text { get; set; }
        }
    }
}