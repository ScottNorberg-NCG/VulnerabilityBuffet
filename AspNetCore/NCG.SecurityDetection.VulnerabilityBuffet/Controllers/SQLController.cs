using Microsoft.Data.SqlClient;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Http.Features;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using NCG.SecurityDetection.VulnerabilityBuffet.Data;
using NCG.SecurityDetection.VulnerabilityBuffet.Models;
using System.Data;

namespace NCG.SecurityDetection.VulnerabilityBuffet.Controllers
{
    [AutoValidateAntiforgeryToken]
    public class SQLController : Controller
    {
        ApplicationDbContext _context;
        IConfiguration _config;
        readonly ILogger _logger;

        private readonly string _awsAccessKey = "AKIAIOSFODNN7EXAMPLE";
        private readonly string _awsSecretKey = "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY";

        public SQLController(ApplicationDbContext context, IConfiguration config, ILogger<SQLController> logger)
        {
            _context = context;
            _config = config;
            _logger = logger;
        }

        public IActionResult Index()
        {
            _logger.Log(LogLevel.Information, "Index called");
            return View();
        }

        [HttpGet]
        public IActionResult AllStringInForm()
        {
            var model = new AccountUserViewModel();
            model.SearchText = "(None)";
            return View(model);
        }

        [HttpPost]
        public IActionResult AllStringInForm(string foodName)
        {
            try
            {
                _logger.Log(LogLevel.Information, $"AllStringInForm POST with {foodName} as food name");
                var model = UnsafeModel_Interpolation_Query(foodName);
                return View(model);
            }
            catch
            {
                return View(CreateModelForError(foodName));
            }
        }

        [HttpGet]
        public IActionResult AllIntInForm()
        {
            var model = new AccountUserViewModel();
            model.SearchText = "(None)";
            return View(model);
        }

        [HttpPost]
        public IActionResult AllIntInForm(string foodId)
        {
            try
            {
                _logger.Log(LogLevel.Information, "AllIntInForm POST with " + foodId + " as food name");
                var model = UnsafeModel_Int(foodId);
                return View(model);            
            }
            catch
            {
                return View(CreateModelForError(foodId));
            }
        }

        [HttpGet]
        public IActionResult AllStringInFormCsrfProtected()
        {
            var model = new AccountUserViewModel();
            model.SearchText = "(None)";
            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AllStringInFormCsrfProtected(string foodName)
        {
            try
            { 
                var model = UnsafeModel_Concat(foodName);
                return View(model);            
            }
            catch
            {
                return View(CreateModelForError(foodName));
            }
        }

        [HttpGet]
        public IActionResult AllStringInQSQuoteEscaped([FromQuery]string foodName)
        {
            try
            {
                var escaped = foodName.Replace("'", "''");
                var model = new AccountUserViewModel();
                model.SearchText = escaped;
                var query = "SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%" + escaped + "%'";
                model.Foods = _context.ExecSQL<FoodDisplayView>(query, null);

                return View(model);
            }
            catch
            {
                return View(CreateModelForError(foodName));
            }
        }

        [HttpGet]
        public IActionResult AllIntInQSQuoteEscaped([FromQuery]string foodId)
        {
            try
            {
                var escaped = foodId.Replace("'", "''");
                var model = new AccountUserViewModel();
                model.SearchText = escaped;
                var query = "SELECT * FROM FoodDisplayView WHERE FoodID = " + foodId;
                model.Foods = _context.ExecSQL<FoodDisplayView>(query, null);
                return View(model);
            }
            catch
            {
                return View(CreateModelForError(foodId));
            }
        }

        [Route("/sql/AllStringInPath/{foodName}")]
        public IActionResult AllStringInPath(string foodName)
        {
            try
            { 
                var model = UnsafeModel_Concat_Query(foodName);
                return View(model);            
            }
            catch
            {
                return View(CreateModelForError(foodName));
            }
        }

        public IActionResult AllStringInQS([FromQuery]string foodName)
        {
            try
            {
                _logger.LogTrace(foodName);
                var model = UnsafeModel_Interpolation(foodName);
                model.SearchText = System.Net.WebUtility.HtmlEncode(foodName);
                return View(model);            
            }
            catch
            {
                return View(CreateModelForError(foodName));
            }
        }

        public IActionResult AllIntInQS([FromQuery]string foodId)
        {
            try
            {
                var model = UnsafeModel_Int(foodId);
                return View(model);            
            }
            catch
            {
                return View(CreateModelForError(foodId));
            }
        }

        [HttpGet]
        public IActionResult AllStringLineBreak()
        {
            var model = new AccountUserViewModel();
            model.SearchText = "(None)";
            return View(model);
        }

        [HttpPost]
        public IActionResult AllStringLineBreak(string foodName, string foodGroup)
        {
            try
            { 
                var model = new AccountUserViewModel();
                model.SearchText = $"Food Name: {foodName}, Food Group: {foodGroup}";
                var searchText = @"SELECT * 
                                    FROM FoodDisplayView 
                                    WHERE FoodName LIKE '%" + foodName + "%' OR " +
                                        "FoodGroup LIKE '%" + foodGroup + "%'";

                model.Foods = _context.ExecSQL<FoodDisplayView>(searchText, null);
                return View(model);            
            }
            catch
            {
                return View(CreateModelForError(foodName));
            }
        }

        [HttpGet]
        public IActionResult AllStringLineBreakSafeSecond()
        {
            var model = new AccountUserViewModel();
            model.SearchText = "(None)";
            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult AllStringLineBreakSafeSecond(string foodName, string foodGroup)
        {
            try
            { 
                var model = new AccountUserViewModel();
                model.SearchText = $"Food Name: {foodName}, Food Group: {foodGroup}";
                var searchText = @"SELECT * 
                                    FROM FoodDisplayView 
                                    WHERE FoodName LIKE '%" + foodName + "%' OR " +
                                        "FoodGroup LIKE '%' + @FoodGroup + '%'";

                model.Foods = _context.ExecSQL<FoodDisplayView>(searchText, new SqlParameter("@FoodGroup", foodGroup));
                return View(model);            
            }
            catch
            {
                return View(CreateModelForError(foodName));
            }
        }

        [Route("/sql/{foodName}/AllStringWithinPath")]
        public IActionResult AllStringWithinPath(string foodName)
        {
            try
            { 
                var model = UnsafeModel_Format(foodName);
                model.SearchText = System.Web.HttpUtility.HtmlEncode(model.SearchText);
                return View(model);            
            }
            catch
            {
                return View(CreateModelForError(foodName));
            }
        }

        public IActionResult ErrorBased(string foodName)
        {
            try
            {
                var model = UnsafeModel_Format_Query(foodName);
                return View(model);
            }
            catch (Exception ex)
            {
                return View(UnsafeModel("An error occurred: " + ex.ToString()));
            }
        }

        public IActionResult UrlDecode(string foodName)
        {
            try
            {
                var filteredFoodName = foodName.Replace("'", "''");
                var decodedFoodName = System.Net.WebUtility.UrlDecode(filteredFoodName);
                var model = UnsafeModel(decodedFoodName);
                return View(model);
            }
            catch
            {
                return View(CreateModelForError(foodName));
            }
        }

        [HttpGet]
        public IActionResult UrlDecodeInForm()
        {
            var model = new AccountUserViewModel();
            model.SearchText = "(None)";
            return View(model);
        }

        [ValidateAntiForgeryToken]
        [HttpPost]
        public IActionResult UrlDecodeInForm(string foodName)
        {
            try
            {
                var filteredFoodName = foodName.Replace("'", "''");
                var decodedFoodName = System.Net.WebUtility.UrlDecode(filteredFoodName);
                var model = UnsafeModel(decodedFoodName);
                return View(model);
            }
            catch
            {
                return View(CreateModelForError(foodName));
            }
        }

        [HttpGet]
        public IActionResult IntInCookie()
        {
            AccountUserViewModel model;

            var previousSearchValue = HttpContext.Request.Cookies["FoodGroupIdSearch"];

            if (!string.IsNullOrEmpty(previousSearchValue))
            {
                try
                {
                    ViewBag.AvailableValues = _context.FoodGroups.Select(g => new SearchItemViewModel() { Text = g.FoodGroupText, Value = g.FoodGroupID.ToString(), IsSelected = g.FoodGroupID.ToString() == previousSearchValue });

                    model = new AccountUserViewModel();
                    model.SearchText = previousSearchValue;
                    var searchText = "SELECT * FROM FoodDisplayView WHERE FoodGroupId = " + previousSearchValue;
                    model.Foods = _context.ExecSQL<FoodDisplayView>(searchText, null);
                }
                //Let's make sure that we can't lock ourselves out of the page
                catch
                {
                    ViewBag.AvailableValues = _context.FoodGroups.Select(g => new SearchItemViewModel() { Text = g.FoodGroupText, Value = g.FoodGroupID.ToString(), IsSelected = false });
                    model = new AccountUserViewModel();
                    model.SearchText = "(None)";
                }
            }
            else
            {
                ViewBag.AvailableValues = _context.FoodGroups.Select(g => new SearchItemViewModel() { Text = g.FoodGroupText, Value = g.FoodGroupID.ToString(), IsSelected = false });
                model = new AccountUserViewModel();
                model.SearchText = "(None)";
            }

            return View(model);
        }

        [ValidateAntiForgeryToken]
        [HttpPost]
        public IActionResult IntInCookie(string foodGroupId)
        {
            ViewBag.AvailableValues = _context.FoodGroups.Select(g => new SearchItemViewModel() { Text = g.FoodGroupText, Value = g.FoodGroupID.ToString(), IsSelected = g.FoodGroupID.ToString() == foodGroupId });

            try
            {
                var options = new CookieOptions();
                options.Expires = DateTime.Now.AddYears(1);
                options.HttpOnly = false;
                options.SameSite = SameSiteMode.None;
                options.IsEssential = true;

                HttpContext.Response.Cookies.Append("FoodGroupIdSearch", foodGroupId, options);

                var searchText = "SELECT * FROM FoodDisplayView WHERE FoodGroupID = @FoodGroupID";

                var model = new AccountUserViewModel();
                model.SearchText = foodGroupId;
                model.Foods = _context.ExecSQL<FoodDisplayView>(searchText, new SqlParameter("@FoodGroupID", foodGroupId));

                return View(model);
            }
            catch
            {
                return View(CreateModelForError(foodGroupId));
            }
        }

        [HttpGet]
        public IActionResult StringInCookie()
        {
            AccountUserViewModel model;

            var previousSearchValue = HttpContext.Request.Cookies["FoodNameSearch"];

            if (!string.IsNullOrEmpty(previousSearchValue))
            {
                try
                {
                    model = UnsafeModel(previousSearchValue);
                }
                catch
                {
                    model = new AccountUserViewModel();
                    model.SearchText = "(None)";
                }
            }
            else
            {
                model = new AccountUserViewModel();
                model.SearchText = "(None)";
            }

            return View(model);
        }

        [HttpPost]
        public IActionResult StringInCookie(string foodName)
        {
            try
            {
                var options = new CookieOptions();
                options.Expires = DateTime.Now.AddYears(1);
                options.HttpOnly = false;
                options.SameSite = SameSiteMode.None;
                options.IsEssential = true;

                HttpContext.Response.Cookies.Append("FoodNameSearch", foodName, options);

                var searchText = "SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%' + @FoodName + '%'";

                var model = new AccountUserViewModel();
                model.SearchText = foodName;
                model.Foods = _context.ExecSQL<FoodDisplayView>(searchText, new SqlParameter("@FoodName", foodName));

                return View(model);
            }
            catch
            {
                return View(CreateModelForError(foodName));
            }
        }

        public IActionResult FalsePositive_Calc(string foodId)
        {
            int calculated = 0;
            var model = new AccountUserViewModel();

            DataTable dt = new DataTable();
            try
            {
                calculated = (int)dt.Compute(foodId, "");
            }
            catch
            {
                try
                {
                    calculated = int.Parse(foodId);
                }
                catch
                {
                    model.SearchText = "(Error)";
                    model.Foods = new List<FoodDisplayView>();
                    return View(model);
                }
            }

            model.SearchText = calculated.ToString();
            model.Foods = _context.ExecSQL<FoodDisplayView>("SELECT * FROM FoodDisplayView WHERE FoodID = @FoodId", new SqlParameter("@FoodID", calculated));
            return View(model);
        }

        public IActionResult FalsePositive_Error(string foodName)
        {
            try
            {
                if (foodName.Contains("'"))
                    throw new Exception("String cannot have an apostrophe");

                var model = new AccountUserViewModel();
                model.Foods = _context.ExecSQL<FoodDisplayView>("SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%' + @FoodName + '%'", new SqlParameter("@FoodName", foodName));
                return View(model);
            }
            catch
            {
                return View(CreateModelForError("An error occurred"));
            }
        }

        public IActionResult QueryStringKey()
        {
            var model = new AccountUserViewModel();

            try
            {
                if (Request.Query.Keys.Count == 0)
                {
                    model.SearchText = "(None)";
                    model.Foods = new List<FoodDisplayView>();
                }
                else
                {
                    var key = Request.Query.Keys.First();
                    model.SearchText = Request.Query[key];

                    var searchText = "SELECT * FROM FoodDisplayView WHERE " + key + " LIKE '%' + @Name + '%'";
                    model.Foods = _context.ExecSQL<FoodDisplayView>(searchText, new SqlParameter("@Name", Request.Query[key].ToString()));
                }

                return View(model);            
            }
            catch
            {
                return View(CreateModelForError(model.SearchText));
            }
        }

        private AccountUserViewModel UnsafeModel(string foodName)
        {
            var model = new AccountUserViewModel();
            model.SearchText = foodName;
            var searchText = "SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%" + foodName + "%'";
            model.Foods = _context.ExecSQL<FoodDisplayView>(searchText, null);
            return model;
        }

        private AccountUserViewModel CreateModelForError(string foodName)
        {
            var model = new AccountUserViewModel();
            model.SearchText = "An error occurred searching for " + foodName;
            model.Foods = new List<FoodDisplayView>();
            return model;
        }

        //This is here to see if SAST scanners will pick it up
        private AccountUserViewModel UnsafeModel_Concat(string foodName)
        {
            var model = new AccountUserViewModel();
            model.SearchText = foodName;

            using (var connection = new SqlConnection())
            {
                connection.ConnectionString = "Server=localhost\\SQL2019;Initial Catalog=VulnerabilityBuffet;Persist Security Info=False;User ID=ApplicationLogUser;Password=P@ssw0rd*;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=True;Connection Timeout=30;";

                var command = connection.CreateCommand();
                command.CommandText = "SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%" + foodName + "%'";

                connection.Open();

                var foods = new List<FoodDisplayView>();

                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var newFood = new FoodDisplayView();

                        newFood.FoodID = reader.GetInt32(0);
                        newFood.FoodGroupID = reader.GetInt32(1);
                        newFood.FoodGroup = reader.GetString(2);
                        newFood.FoodName = reader.GetString(3);
                        newFood.Calories = reader.GetInt32(4);
                        newFood.Protein = reader.GetDouble(5);
                        newFood.Fat = reader.GetDouble(6);
                        newFood.Carbohydrates = reader.GetDouble(7);

                        foods.Add(newFood);
                    }
                }

                model.Foods = foods;

                connection.Close();
            }
            
            return model;
        }

        //This is here to see if SAST scanners will pick it up
        private AccountUserViewModel UnsafeModel_Interpolation(string foodName)
        {
            var model = new AccountUserViewModel();
            model.SearchText = foodName;

            using (var connection = new SqlConnection(_config.GetConnectionString("DefaultConnection")))
            {
                var command = connection.CreateCommand();
                command.CommandText = $"SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%{foodName}%'";

                connection.Open();

                var foods = new List<FoodDisplayView>();

                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var newFood = new FoodDisplayView();

                        newFood.FoodID = reader.GetInt32(0);
                        newFood.FoodGroupID = reader.GetInt32(1);
                        newFood.FoodGroup = reader.GetString(2);
                        newFood.FoodName = reader.GetString(3);
                        newFood.Calories = reader.GetInt32(4);
                        newFood.Protein = reader.GetDouble(5);
                        newFood.Fat = reader.GetDouble(6);
                        newFood.Carbohydrates = reader.GetDouble(7);

                        foods.Add(newFood);
                    }
                }

                model.Foods = foods;

                connection.Close();
            }

            return model;
        }

        //This is here to see if SAST scanners will pick it up
        private AccountUserViewModel UnsafeModel_Format(string foodName)
        {
            var model = new AccountUserViewModel();
            model.SearchText = foodName;

            using (var cn = new SqlConnection(_config.GetConnectionString("DefaultConnection")))
            {
                var command = cn.CreateCommand();
                command.CommandText = string.Format("SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%{0}%'", foodName);

                cn.Open();

                var foods = new List<FoodDisplayView>();

                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var newFood = new FoodDisplayView();

                        newFood.FoodID = reader.GetInt32(0);
                        newFood.FoodGroupID = reader.GetInt32(1);
                        newFood.FoodGroup = reader.GetString(2);
                        newFood.FoodName = reader.GetString(3);
                        newFood.Calories = reader.GetInt32(4);
                        newFood.Protein = reader.GetDouble(5);
                        newFood.Fat = reader.GetDouble(6);
                        newFood.Carbohydrates = reader.GetDouble(7);

                        foods.Add(newFood);
                    }
                }

                model.Foods = foods;

                cn.Close();
            }

            return model;
        }

        //This is here to see if SAST scanners will pick it up
        private AccountUserViewModel UnsafeModel_Concat_Query(string foodName)
        {
            var query = "SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%" + foodName + "%'";

            var model = new AccountUserViewModel();
            model.SearchText = foodName;

            using (var connection = new SqlConnection(_config.GetConnectionString("DefaultConnection")))
            {
                var command = connection.CreateCommand();
                command.CommandText = query;

                connection.Open();

                var foods = new List<FoodDisplayView>();

                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var newFood = new FoodDisplayView();

                        newFood.FoodID = reader.GetInt32(0);
                        newFood.FoodGroupID = reader.GetInt32(1);
                        newFood.FoodGroup = reader.GetString(2);
                        newFood.FoodName = reader.GetString(3);
                        newFood.Calories = reader.GetInt32(4);
                        newFood.Protein = reader.GetDouble(5);
                        newFood.Fat = reader.GetDouble(6);
                        newFood.Carbohydrates = reader.GetDouble(7);

                        foods.Add(newFood);
                    }
                }

                model.Foods = foods;

                connection.Close();
            }

            return model;
        }

        //This is here to see if SAST scanners will pick it up
        private AccountUserViewModel UnsafeModel_Interpolation_Query(string foodName)
        {
            var query = $"SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%{foodName}%'";

            var model = new AccountUserViewModel();
            model.SearchText = foodName;

            using (var connection = new SqlConnection(_config.GetConnectionString("DefaultConnection")))
            {
                var command = connection.CreateCommand();
                command.CommandText = query;

                connection.Open();

                var foods = new List<FoodDisplayView>();

                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var newFood = new FoodDisplayView();

                        newFood.FoodID = reader.GetInt32(0);
                        newFood.FoodGroupID = reader.GetInt32(1);
                        newFood.FoodGroup = reader.GetString(2);
                        newFood.FoodName = reader.GetString(3);
                        newFood.Calories = reader.GetInt32(4);
                        newFood.Protein = reader.GetDouble(5);
                        newFood.Fat = reader.GetDouble(6);
                        newFood.Carbohydrates = reader.GetDouble(7);

                        foods.Add(newFood);
                    }
                }

                model.Foods = foods;

                connection.Close();
            }

            return model;
        }

        //This is here to see if SAST scanners will pick it up
        private AccountUserViewModel UnsafeModel_Format_Query(string foodName)
        {
            var query = string.Format("SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%{0}%'", foodName);

            var model = new AccountUserViewModel();
            model.SearchText = foodName;

            using (var cn = new SqlConnection(_config.GetConnectionString("DefaultConnection")))
            {
                var command = cn.CreateCommand();
                command.CommandText = query;

                cn.Open();

                var foods = new List<FoodDisplayView>();

                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var newFood = new FoodDisplayView();

                        newFood.FoodID = reader.GetInt32(0);
                        newFood.FoodGroupID = reader.GetInt32(1);
                        newFood.FoodGroup = reader.GetString(2);
                        newFood.FoodName = reader.GetString(3);
                        newFood.Calories = reader.GetInt32(4);
                        newFood.Protein = reader.GetDouble(5);
                        newFood.Fat = reader.GetDouble(6);
                        newFood.Carbohydrates = reader.GetDouble(7);

                        foods.Add(newFood);
                    }
                }

                model.Foods = foods;

                cn.Close();
            }

            return model;
        }

        private AccountUserViewModel UnsafeModel_Int(string foodId)
        {
            var model = new AccountUserViewModel();
            model.SearchText = foodId;
            var searchText = "SELECT * FROM FoodDisplayView WHERE FoodId = " + foodId;
            model.Foods = _context.ExecSQL<FoodDisplayView>(searchText, null);
            return model;
        }

        //Like
        //Int
        //In FROM clause
        //With CSRF validation
    }

    public static class SqlDataReaderExtensions
    {
        public static int? GetNullableInt(this SqlDataReader reader, int index)
        {
            var value = reader[index];
            if (value == null || value == DBNull.Value)
                return null;
            else
                return (int)value;
        }

        public static double? GetNullableDouble(this SqlDataReader reader, int index)
        {
            var value = reader[index];
            if (value == null || value == DBNull.Value)
                return null;
            else
                return (double)value;
        }
    }
}