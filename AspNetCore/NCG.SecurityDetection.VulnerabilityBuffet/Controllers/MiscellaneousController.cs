using System;
using System.Collections.Generic;
using Microsoft.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Threading.Tasks;
using System.Xml;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using NCG.SecurityDetection.VulnerabilityBuffet.Data;
using NCG.SecurityDetection.VulnerabilityBuffet.Models;
using Microsoft.AspNetCore.Html;
using Microsoft.AspNetCore.Mvc.Rendering;
using System.Text.RegularExpressions;
using System.Text;

namespace NCG.SecurityDetection.VulnerabilityBuffet.Controllers
{
    public class MiscellaneousController : Controller
    {
        ApplicationDbContext _context;
        IHostingEnvironment _hostEnv;

        public MiscellaneousController(ApplicationDbContext context, IHostingEnvironment hostingEnvironment)
        {
            _context = context;
            _hostEnv = hostingEnvironment;
        }

        public IActionResult Index()
        {
            return View();
        }

        [HttpGet]
        [HttpPost]
        public IActionResult AngularJS(string id)
        {
            ViewBag.SearchText = id;
            return View();
        }

        [Route("/Miscellaneous/ValueShadowing/{foodName}")]
        public IActionResult ValueShadowing(string foodName)
        {
            if (Request.Cookies["foodName"] != null)
                foodName = Request.Cookies["foodName"];

            if (Request.Query.Keys.Contains("foodName"))
                foodName = Request.Query["foodName"];

            var model = new AccountUserViewModel();

            if (foodName != null && Request.Method != "GET")
            {
                model.SearchText = foodName;
                model.Foods = _context.ExecSQL<FoodDisplayView>("SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%' + @FoodName + '%'", new SqlParameter("@FoodName", foodName));
            }
            else
            {
                model.SearchText = "(None)";
                model.Foods = new List<FoodDisplayView>();
            }

            return View(model);
        }

        [Route("/Miscellaneous/MD5/{foodName}")]
        public IActionResult MD5Hash(string foodName)
        {
            var model = new AccountUserViewModel();

            model.SearchText = foodName;
            model.Foods = _context.ExecSQL<FoodDisplayView>("SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%' + @FoodName + '%'", new SqlParameter("@FoodName", foodName));

            using (var hash = MD5.Create())
            {
                var foodNameAsBytes = System.Text.Encoding.UTF8.GetBytes(foodName);
                var hashedBytes = hash.ComputeHash(foodNameAsBytes);
                var hashedAsString = System.Text.Encoding.UTF8.GetString(hashedBytes);

                Response.Cookies.Append("FoodNameHash", hashedAsString);
            }

            return View(model);
        }

        [HttpGet]
        public IActionResult Xxe()
        {
            ViewBag.SearchText = "";
            return View();
        }

        [HttpPost]
        public IActionResult XxeSearch()
        {
            var xml = new StreamReader(HttpContext.Request.Body, encoding: Encoding.UTF8, detectEncodingFromByteOrderMarks: false, leaveOpen: true).ReadToEndAsync().Result;

            ViewBag.SearchText = "";

            var xmlDoc = new XmlDocument();
            xmlDoc.XmlResolver = new XmlUrlResolver();
            xmlDoc.LoadXml(xml);

            var columnName = xmlDoc.SelectSingleNode("/search/for").InnerText;
            var searchType = xmlDoc.SelectSingleNode("/search/type").InnerText;
            var searchText = xmlDoc.SelectSingleNode("/search/text").InnerText;

            var whereClause = "";

            if (searchType == "LIKE")
                whereClause = "LIKE '%' + @FoodName + '%'";
            else //Not a safe assumption, but this is a test/fake site, so let's be sloppy
                whereClause = "= @FoodName";

            var foods = _context.ExecSQL<FoodDisplayView>($"SELECT * FROM FoodDisplayView WHERE {columnName} {whereClause}", new SqlParameter("@FoodName", searchText));

            return Json(new { searchText, foods });
        }

        [HttpGet]
        public IActionResult FileInclusion()
        {
            ViewBag.FileContents = "";
            return View();
        }

        [HttpPost]
        public IActionResult FileInclusion(AccountUserViewModel model)
        {
            var fullFilePath = _hostEnv.ContentRootPath + "\\wwwroot\\text\\" + model.SearchText;
            var fileContents = System.IO.File.ReadAllText(fullFilePath);
            ViewBag.FileContents = fileContents;

            return View(model);
        }

        [HttpGet]
        public IActionResult JSInjection(string searchText)
        {
            ViewBag.SearchText = searchText;
            return View();
        }

        [HttpPost]
        public IActionResult SearchByName(string id)
        {
            var foods = _context.ExecSQL<FoodDisplayView>($"SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%' + @FoodName + '%'", new SqlParameter("@FoodName", id));

            return Json(new { id, foods });
        }

        [HttpGet]
        public IActionResult CSSInjection()
        {
            ViewBag.Color = "white";
            return View();
        }

        [HttpPost]
        public IActionResult CSSInjection(string color)
        {
            ViewBag.Color = color;

            return View();
        }

        public IActionResult ConnectionString()
        {
            return View();
        }

        [HttpGet]
        public IActionResult UnsafeRegex()
        {
            return View(new AccountUserViewModel());
        }

        [HttpPost]
        public IActionResult UnsafeRegex(string foodName, string regex)
        {
            var filtered = Regex.Replace(foodName, regex, "", RegexOptions.IgnoreCase);
            return View(CreateModel(filtered));
        }

        [HttpGet]
        public IActionResult Reflection()
        {
            return View(new AccountUserViewModel());
        }

        [HttpPost]
        public IActionResult Reflection(string foodName, string library)
        {
            var fullClassName = library.Substring(0, library.LastIndexOf('.'));

            var parts = library.Split('.');
            var methodName = parts[parts.Length - 1];

            var assembly = System.Reflection.Assembly.GetAssembly(Type.GetType(fullClassName));
            var classInstance = assembly.GetType(fullClassName).GetMethod(methodName, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static, new[] { typeof(string) });
            var filtered = classInstance.Invoke(classInstance, new object[] { foodName }).ToString();

            return View(CreateModel(filtered));
        }

        private AccountUserViewModel CreateModel(string foodName)
        {
            var model = new AccountUserViewModel();
            model.SearchText = foodName;
            model.Foods = _context.ExecSQL<FoodDisplayView>("SELECT * FROM FoodDisplayView WHERE FoodName LIKE '%' + @FoodName + '%'", new SqlParameter("@FoodName", foodName));
            return model;
        }
    }
}