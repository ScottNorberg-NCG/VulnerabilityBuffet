using NCG.SecurityDetection.VulnerabilityBuffet.Data;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace NCG.SecurityDetection.VulnerabilityBuffet.Models
{
    public class AdminOrderItemViewModel
    {
        public int OrderID { get; set; }
        public string OrderedBy { get; set; }
        public double TotalPrice { get; set; }
        public DateTime DateCompleted { get; set; }
        public string CreditCardNumber { get; set; }
        public string CreditCardExpiration { get; set; }

        public AdminOrderItemViewModel(Order order)
        {
            this.OrderID = order.OrderID;
            this.OrderedBy = order.User.UserName;
            this.TotalPrice = order.TotalPrice.Value;
            this.DateCompleted = order.DateCompleted.Value;
            this.CreditCardNumber = Decrypt(order.CreditCardNumber);
            this.CreditCardExpiration = $"{Decrypt(order.CreditCardExpirationMonth)}/{order.CreditCardExpirationYear}";
        }

        private string Decrypt(string toDecrypt)
        {
            byte[] encryptedBytes = Convert.FromBase64String(toDecrypt);

            //DES is not safe - use AES instead
            var rc2service = new RC2CryptoServiceProvider();

            rc2service.Key = new byte[] { 10, 30, 50, 70, 90 };
            rc2service.IV = new byte[] { 8, 20, 16, 40, 24, 60, 32, 80 };
            rc2service.Mode = CipherMode.ECB;
            rc2service.Padding = PaddingMode.PKCS7;

            using (var transform = rc2service.CreateDecryptor())
            {
                byte[] decryptedBytes = transform.TransformFinalBlock(encryptedBytes, 0, encryptedBytes.Length);
                return UTF8Encoding.UTF8.GetString(decryptedBytes);
            }
        }
    }
}
