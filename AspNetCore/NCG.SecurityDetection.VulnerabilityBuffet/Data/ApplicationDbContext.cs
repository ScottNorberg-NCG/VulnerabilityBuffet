using System;
using System.Collections.Generic;
using System.Data;
using Microsoft.Data.SqlClient;
using System.Reflection;
using System.Text;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

namespace NCG.SecurityDetection.VulnerabilityBuffet.Data
{
    public partial class ApplicationDbContext : IdentityDbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Food> Foods { get; set; }
        public virtual DbSet<FoodDisplayView> FoodDisplayViews { get; set; }
        public virtual DbSet<FoodGroup> FoodGroups { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<SiteUser> SiteUsers { get; set; }
        public virtual DbSet<UnsafeFile> UnsafeFiles { get; set; }
        public virtual DbSet<UserFile> UserFiles { get; set; }
        public virtual DbSet<UserPersonalInformation> UserPersonalInformations { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Entity<Food>(entity =>
            {
                entity.ToTable("Food");

                entity.Property(e => e.FoodID).ValueGeneratedNever();

                entity.Property(e => e.FoodName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.HasOne(d => d.FoodGroup)
                    .WithMany(p => p.Foods)
                    .HasForeignKey(d => d.FoodGroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Food_FoodGroup");
            });

            modelBuilder.Entity<FoodDisplayView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FoodDisplayView");

                entity.Property(e => e.FoodGroup)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FoodName)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<FoodGroup>(entity =>
            {
                entity.ToTable("FoodGroup");

                entity.Property(e => e.FoodGroupText)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.ToTable("Order");

                entity.Property(e => e.CreditCardExpirationMonth)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreditCardNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DateCompleted).HasColumnType("datetime");

                entity.Property(e => e.DateCreated).HasColumnType("datetime");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.UserID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_SiteUser");
            });

            modelBuilder.Entity<OrderDetail>(entity =>
            {
                entity.ToTable("OrderDetail");

                entity.HasOne(d => d.FoodGroup)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.FoodGroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDetail_FoodGroup");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.OrderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDetail_Order");
            });

            modelBuilder.Entity<SiteUser>(entity =>
            {
                entity.HasKey(e => e.UserID);

                entity.ToTable("SiteUser");

                entity.Property(e => e.FavoriteFood).HasMaxLength(1000);

                entity.Property(e => e.FavoriteFoodGroup).HasMaxLength(1000);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.UserPassword)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<UnsafeFile>(entity =>
            {
                entity.HasKey(e => e.FileID);

                entity.ToTable("UnsafeFile");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<UserFile>(entity =>
            {
                entity.HasKey(e => e.FileID);

                entity.ToTable("UserFile");

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FileBytes).IsRequired();

                entity.Property(e => e.FileExtension)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserFiles)
                    .HasForeignKey(d => d.UserID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserFile_SiteUser");
            });

            modelBuilder.Entity<UserPersonalInformation>(entity =>
            {
                entity.HasKey(e => e.UserID);

                entity.ToTable("UserPersonalInformation");

                entity.Property(e => e.UserID).ValueGeneratedNever();

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.EmailAddress)
                    .HasMaxLength(100);

                entity.HasOne(d => d.User)
                    .WithOne(p => p.UserPersonalInformation)
                    .HasForeignKey<UserPersonalInformation>(d => d.UserID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserPersonalInformation_SiteUser");
            });
        }
    }
}
