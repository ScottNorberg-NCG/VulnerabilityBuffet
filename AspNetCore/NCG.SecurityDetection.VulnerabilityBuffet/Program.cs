using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using NCG.SecurityDetection.VulnerabilityBuffet.Authentication;
using NCG.SecurityDetection.VulnerabilityBuffet.Data;
using NCG.SecurityDetection.VulnerabilityBuffet.Logging;

namespace NCG.SecurityDetection.VulnerabilityBuffet
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            builder.Services.Configure<CookiePolicyOptions>(options =>
            {
                // This lambda determines whether user consent for non-essential cookies is needed for a given request.
                options.CheckConsentNeeded = context => true;
                options.MinimumSameSitePolicy = SameSiteMode.None;
            });

            builder.Services.AddDbContext<ApplicationDbContext>(options =>
                options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

            builder.Services.AddDefaultIdentity<IdentityUser>()
                .AddEntityFrameworkStores<ApplicationDbContext>();

            builder.Services.Configure<IdentityOptions>(options =>
            {
                options.Password.RequireDigit = false;
                options.Password.RequireLowercase = false;
                options.Password.RequiredLength = 6;
                options.Password.RequireNonAlphanumeric = false;
                options.Password.RequireUppercase = false;
            });

            builder.Services.Configure<CookiePolicyOptions>(options =>
            {
                options.CheckConsentNeeded = context => false;
                options.MinimumSameSitePolicy = SameSiteMode.Unspecified;
                options.Secure = CookieSecurePolicy.None;
            });

            builder.Services.AddScoped(typeof(AuthManager));

            //builder.Services.AddMvc().AddRazorPagesOptions(o =>
            //{
            //    o.Conventions.ConfigureFilter(new IgnoreAntiforgeryTokenAttribute());
            //});

            builder.Services.AddControllersWithViews();

            builder.Services.AddSingleton<ILoggerProvider, DatabaseLogProvider>();

            //builder.Host.ConfigureLogging((context, loggingBuilder) =>
            //{
            //    loggingBuilder.AddFilter<DatabaseLogProvider>("NCG.SecurityDetection.VulnerabilityBuffet", LogLevel.Trace);
            //});

            var app = builder.Build();

            if (app.Environment.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                //app.UseExceptionHandler("/Home/Error");
                //// The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                //app.UseHsts();

                app.UseDeveloperExceptionPage();
            }

            //app.Use(async (context, next) => {
            //    await next();
            //    if (context.Response.StatusCode == StatusCodes.Status400BadRequest)
            //    {
            //        var result = JsonConvert.SerializeObject(new { error = "Not Supported" });
            //        context.Response.ContentType = "application/json";
            //        context.Response.StatusCode = (int)StatusCodes.Status400BadRequest;
            //        await context.Response.WriteAsync(result);
            //    }
            //});

            app.UseHttpsRedirection();
            app.UseStaticFiles();
            app.UseCookiePolicy();

            app.UseAuthentication();
            app.UseAuthorization();

            app.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Home}/{action=Index}/{id?}"
            );
            app.MapRazorPages();

            app.Run();
        }
    }
}
