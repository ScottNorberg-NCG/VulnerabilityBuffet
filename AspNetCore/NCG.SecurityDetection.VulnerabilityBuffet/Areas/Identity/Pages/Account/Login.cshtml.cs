using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;
using NCG.SecurityDetection.VulnerabilityBuffet.Authentication;

namespace NCG.SecurityDetection.VulnerabilityBuffet.Areas.Identity.Pages.Account
{
    [AllowAnonymous]
    [IgnoreAntiforgeryToken(Order = 1001)]
    public class LoginModel : PageModel
    {
        private readonly AuthManager _authManager;
        private readonly ILogger<LoginModel> _logger;

        public LoginModel(AuthManager authManager, ILogger<LoginModel> logger)
        {
            _authManager = authManager;
            _logger = logger;
        }

        [BindProperty]
        public InputModel Input { get; set; }

        public string ReturnUrl { get; set; }

        [TempData]
        public string ErrorMessage { get; set; }

        public class InputModel
        {
            [Required]
            public string Email { get; set; }

            [Required]
            [DataType(DataType.Password)]
            public string Password { get; set; }

            [Display(Name = "Remember me?")]
            public bool RememberMe { get; set; }
        }

        public async Task OnGetAsync(string returnUrl = null)
        {
            if (!string.IsNullOrEmpty(ErrorMessage))
            {
                ModelState.AddModelError(string.Empty, ErrorMessage);
            }

            returnUrl = returnUrl ?? Url.Content("~/");

            _authManager.SignOut();

            ReturnUrl = returnUrl;
        }

        public async Task<IActionResult> OnPostAsync(string returnUrl = null)
        {
            returnUrl = returnUrl ?? Url.Content("~/");

            if (ModelState.IsValid)
            {
                var result = _authManager.SignIn(Input.Email, Input.Password);

                if (result == AuthManager.SignInResult.UserNotFound)
                {
                    ModelState.AddModelError(string.Empty, "Username not found");
                    return Page();
                }
                else if (result == AuthManager.SignInResult.PasswordMismatch)
                {
                    ModelState.AddModelError(string.Empty, "Password invalid");
                    return Page();
                }
                else
                {
                    _logger.LogInformation("User logged in.");
                    return Redirect(returnUrl); //LocalRedirect(returnUrl);
                }
            }

            // If we got this far, something failed, redisplay form
            return Page();
        }
    }
}
