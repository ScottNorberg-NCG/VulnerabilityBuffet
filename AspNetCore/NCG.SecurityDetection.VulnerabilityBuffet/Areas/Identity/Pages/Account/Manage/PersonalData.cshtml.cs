using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;
using NCG.SecurityDetection.VulnerabilityBuffet.Authentication;
using NCG.SecurityDetection.VulnerabilityBuffet.Data;
using System.ComponentModel.DataAnnotations;
using Microsoft.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;

namespace NCG.SecurityDetection.VulnerabilityBuffet.Areas.Identity.Pages.Account.Manage
{
    [AllowAnonymous]
    [CustomAuthorize]
    public class PersonalDataModel : PageModel
    {
        private readonly ILogger<PersonalDataModel> _logger;
        ApplicationDbContext _context;
        AuthManager _authManager;

        [BindProperty]
        public InputModel Input { get; set; }

        [TempData]
        public string ErrorMessage { get; set; }

        public class InputModel
        {
            public string Message { get; set; }

            [Required]
            [Display(Name = "Favorite Food")]
            public string FoodName { get; set; }

            [Required]
            [Display(Name = "Favorite Food Group")]
            public string FoodGroup { get; set; }
        }

        public PersonalDataModel(
            AuthManager authManager,
            ILogger<PersonalDataModel> logger,
            ApplicationDbContext context)
        {
            _authManager = authManager;
            _logger = logger;
            _context = context;
        }

        public async Task<IActionResult> OnGet()
        {
            //TODO: Change this so it unsafely gets the user ID from the query string
            var user = _authManager.GetLoggedInUser();
            if (user == null)
            {
                return NotFound($"Unable to load user.");
            }

            Input = new InputModel();
            Input.FoodName = user.FavoriteFood;
            Input.FoodGroup = user.FavoriteFoodGroup;

            return Page();
        }

        public async Task<IActionResult> OnPost()
        {
            //TODO: Change this so it unsafely gets the user ID from the query string
            var user = _authManager.GetLoggedInUser();
            if (user == null)
            {
                return NotFound($"Unable to load user.");
            }

            user.FavoriteFood = Input.FoodName;
            user.FavoriteFoodGroup = Input.FoodGroup;

            _authManager.SaveChanges();

            Input.Message = "Your favorites have been saved";
            return Page();
        }
    }
}