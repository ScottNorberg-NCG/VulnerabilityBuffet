using Microsoft.Data.SqlClient;
using Microsoft.Extensions.Logging;
using NCG.SecurityDetection.VulnerabilityBuffet.Data;
using System;
using System.Collections.Generic;

namespace NCG.SecurityDetection.VulnerabilityBuffet.Logging
{
    public class SafeDatabaseLogger : ILogger
    {
        public IDisposable BeginScope<TState>(TState state) => default!;

        public bool IsEnabled(LogLevel logLevel)
        {
            return true;
        }

        public void Log<TState>(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func<TState, Exception, string> formatter)
        {
            //Do not ensure the connection is closed if an error occurs - let's see if SAST scanners will pick in up
            var connection = new SqlConnection("Server=localhost\\SQL2019;Initial Catalog=VulnerabilityBuffet;Persist Security Info=False;User ID=ApplicationLogUser;Password=P@ssw0rd*;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=True;Connection Timeout=30;");

            var command = connection.CreateCommand();
            command.CommandText = "INSERT ApplicationLog (LogLevel, LogText, DateLogged) VALUES (@LogLevel, @LogText, @DateLogged)";

            var text = state == null ? string.Empty : state.ToString();

            command.Parameters.AddWithValue("@LogLevel", logLevel.ToString());
            command.Parameters.AddWithValue("@LogText", text);
            command.Parameters.AddWithValue("@DateLogged", DateTime.UtcNow);

            connection.Open();

            command.ExecuteNonQuery();

            connection.Close();
        }
    }
}
