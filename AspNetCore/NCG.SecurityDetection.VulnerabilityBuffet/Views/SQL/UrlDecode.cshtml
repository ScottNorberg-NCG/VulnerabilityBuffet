
@{
    ViewData["Title"] = "Url Decode";
}
@model AccountUserViewModel

<partial name="_Menu" />
<div class="attack-page-content">
    <h1>@ViewData["Title"]</h1>
    <p>
        This page escapes SQL apostrophes, but then URL decodes content afterwards. 
        The browser ignores encoded characters, but you can encode the % sign and still submit dangerous content.
        Try submitting <code>%2527</code> where you would normally submit a quotation mark.
    </p>
    <p>
        Side note, it would be better if we had an attack where &quot;%27&quot; would work, but with .NET Core, 
            it appears that what is returned to the controller is either entirely URL encoded or entirely URL decoded.
        Therefore, the double-encoding is the only option available to us here.
    </p>
    <h2>You searched for: @Model.SearchText</h2>
    <table width="100%">
        <tr><th>ID</th><th>Food Name</th><th>Food Group</th><th>Calories</th><th>Protein</th><th>Fat</th><th>Carbohydrates</th></tr>
        @foreach (var food in Model.Foods)
        {
            <tr>
                <td>@food.FoodID</td>
                <td>@food.FoodName</td>
                <td>@food.FoodGroup</td>
                <td>@food.Calories</td>
                <td>@food.Protein</td>
                <td>@food.Fat</td>
                <td>@food.Carbohydrates</td>
            </tr>
        }
    </table>
</div>